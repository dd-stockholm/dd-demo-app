
plugins {
    id 'java'
    id 'application'
    id 'com.github.johnrengelman.shadow' version '1.2.2'
    id 'org.hidetake.ssh' version '1.1.4'
}

repositories {
    mavenLocal()
    mavenCentral()
}

version = '0.1.0'
mainClassName = 'org.dd.demoapp.App'
sourceCompatibility = '1.8'
targetCompatibility = '1.8'

ext {
    dropwizardVersion = "0.9.1"
    dropwizardModulesVersion = '0.9.0-1'
}

dependencies {
    compile "org.slf4j:slf4j-api:1.7.12"
    compile "com.h2database:h2:1.4.190"
    compile "io.dropwizard:dropwizard-core:$dropwizardVersion"
    compile "io.dropwizard:dropwizard-assets:$dropwizardVersion"
    compile "io.dropwizard:dropwizard-jdbi:$dropwizardVersion"
    compile "io.dropwizard.modules:dropwizard-java8:$dropwizardModulesVersion"
    compile "io.dropwizard.modules:dropwizard-java8-jdbi:$dropwizardModulesVersion"
    compile "io.federecio:dropwizard-swagger:0.7.0"

    testCompile "junit:junit:4.12"
    testCompile "io.dropwizard:dropwizard-testing:$dropwizardVersion"
    testCompile 'info.cukes:cucumber-java:1.2.4'
    testCompile 'org.fluentlenium:fluentlenium-core:0.10.9'
}

sourceSets {
    main {
        java { srcDir 'src/main/java' }
        resources { srcDirs 'src/main/resources', 'angularjs'  }
    }
    test {
        java { srcDir 'src/test/java' }
        resources { srcDir 'src/main/resources' }
    }
}

shadowJar {
    mergeServiceFiles()
}

remotes {
  webServer {
    host = 'dd-demo-app.marianna.se'
    user = 'demoapp'
    agent = true
    identity = file("${System.properties['user.home']}/.ssh/id_rsa")
  }
}

task deploy << {
  ssh.run {
    session(remotes.webServer) {
      def deployTime = java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC).toString()
      def jarFileName = "dd-demo-app-${version}-all.jar" 

      execute "mkdir -p ./dd-demo-app/releases/${deployTime}/"
      put from: "build/libs/${jarFileName}", into: "./dd-demo-app/releases/${deployTime}/${jarFileName}"
      execute "rm ./dd-demo-app/latest.jar"
      execute "ln -s ./releases/${deployTime}/${jarFileName} ./dd-demo-app/latest.jar"
      execute 'sudo service dd-demo-app restart'
    }
  }
}
deploy.dependsOn shadowJar

task runSetup << {
    delete 'build/resources/main/app'
}

run {
    classpath("angularjs")
    args 'server', 'app-config.yml'
}
run.dependsOn runSetup

test {
    testLogging {
        events "passed", "skipped", "failed", "standardOut", "standardError"
    }
}

configurations {
    cucumberRuntime {
        extendsFrom testRuntime
    }
}

task cucumber() {
    dependsOn assemble, compileTestJava
    doLast {
        javaexec {
            main = "cucumber.api.cli.Main"
            classpath = configurations.cucumberRuntime + sourceSets.main.output + sourceSets.test.output
            args = ['--plugin', 'pretty', "--tags", "~@wip", '--glue', 'cucumber.steps', 'src/test/features']
        }
    }
}

task cucumber_wip() {
    dependsOn assemble, compileTestJava
    doLast {
        javaexec {
            main = "cucumber.api.cli.Main"
            classpath = configurations.cucumberRuntime + sourceSets.main.output + sourceSets.test.output
            args = ['--plugin', 'pretty', "--tags", "@wip", '--glue', 'cucumber.steps', 'src/test/features']
        }
    }
}
